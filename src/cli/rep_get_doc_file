#!/usr/bin/env python

import base64
import json
import click

from file_encryption import decrypt_file
import secure_requests
import utils
from utils import default_command, logger

@default_command
@click.argument('session_file', required=True, type=click.Path(exists=False, dir_okay=False))
@click.argument('document_name', required=True, type=str)
@click.argument('file', required=False, type=click.Path(exists=False))
def rep_get_file(session_file: str, document_name: str, file: str):

    with open(session_file, 'r') as f:
        session_token = f.read()
    
    # get metadata of the doc
    response = secure_requests.secure_get(
        f"http://{utils.state['REP_ADDRESS']}/file/metadata",
        headers={"session": session_token},
        params= {"document_name": document_name}
    )

    if response.status_code != 200:
        logger.info("Failed to download metadata")
        print(response.content)
        return

    doc_metadata = json.loads(response.content)['metadata']
    logger.info("Metadata downloaded")

    # get file of the doc
    file_handle = doc_metadata['file_handle']
    response = secure_requests.secure_get(
        f"http://{utils.state['REP_ADDRESS']}/file/download/{file_handle}"
    )

    if response.status_code != 201:
        logger.info("Failed to download metadata")
        print(response.content)
        return

    with open(file, "wb+") as fp:
        fp.write(response.content)
    logger.info("File downloaded")

    
    # decrypt file
    key = base64.b64decode(doc_metadata['encryption_key'])
    iv = base64.b64decode(doc_metadata['iv'])
    nonce = base64.b64decode(doc_metadata['nonce'])

    algo, mode = doc_metadata['algorithm'].split('-')
    decrypt_file(key, iv, nonce, file, algo, mode)

    logger.info("File downloaded and decrypted sucesfully")
    

if __name__ == '__main__':
    rep_get_file()