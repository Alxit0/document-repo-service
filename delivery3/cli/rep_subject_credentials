#!/usr/bin/env python

import json
import os
import click
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend

import utils
from utils import default_command, logger

@default_command
@click.argument('password', required=True, type=str)
@click.argument('cred_file', required=True, type=str)
def rep_subject_credentials(password: str, cred_file: str):
    """Generate a new RSA key pair and encrypt the private key."""

    # Paths for saving keys
    private_key_path = os.path.join(os.path.expanduser('~'), '.sio', 'private_key.pem')
    public_key_path = os.path.join(os.path.expanduser('~'), '.sio', 'public_key.pem')
    
    # gen RSA key pair
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()   
    )
    public_key = private_key.public_key()

    # save public key
    with open(public_key_path, "wb") as pub_file:
        public_key_bytes = public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        pub_file.write(public_key_bytes)
    logger.info(f"Public key saved to {public_key_path}")

    # save encrypted private key
    encryption_algorithm = serialization.BestAvailableEncryption(password.encode())
    with open(private_key_path, "wb") as priv_file:
        private_key_bytes = private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=encryption_algorithm
        )
        priv_file.write(private_key_bytes)
    logger.info(f"Private key saved to {private_key_path} (encrypted)")

    # save both keys to given file path
    keys_obj = {
        'REP_PUB_KEY': public_key_bytes.decode(),
        'REP_PRIV_KEY': private_key_bytes.decode()
    }
    utils.state.update(keys_obj)

    with open(cred_file, "+w") as file:
        json.dump(keys_obj, file, indent=4)

    return 0


if __name__ == '__main__':
    rep_subject_credentials()
    exit(1)